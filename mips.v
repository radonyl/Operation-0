// DEVELOP CODE: OPERATION-0
// this code is auto generated by AutoPort v0.2
module mips(
    input wire clk,
    input wire reset
);
    wire rst_n = ~reset;

wire [31:0] PCInc4_F;
wire [4:0] A3_E;
wire [31:0] WD3_W;
wire ctrl_grf_we_E;
wire ctrl_pc_src_D;
wire [31:0] PCInc4_D;
wire [31:0] IR_F;
wire [31:0] RS_D;
wire [31:0] PCInc4_E;
wire ctrl_grf_we_M;
wire stall_F;
wire forwardCmpB_D;
wire [31:0] NPC_D;
wire ctrl_grf_we_W;
wire mem_to_reg_E;
wire mulEnable_E;
wire [4:0] A3_M;
wire forwardCmpA_D;
wire [31:0] PCInc4_M;
wire flush_E;
wire [31:0] DM_M;
wire [31:0] IMM_D;
wire [31:0] PC;
wire ctrl_jump_reg_D;
wire [1:0] forwardAluA_E;
wire [31:0] IR_M;
wire mulBusy_E;
wire [31:0] AO_M;
wire [1:0] forwardAluB_E;
wire ctrl_branch_D;
wire [31:0] IR_D;
wire mulEnable_D;
wire mem_to_reg_M;
wire [31:0] IR_E;
wire [31:0] RT_D;
wire [31:0] RT_E;
wire [31:0] AO_E;
wire [31:0] WD3_M;
wire [4:0] A3_W;
wire stall_D;
stage_if STAGE_IF (
    .clk(clk),
    .rst_n(rst_n),
    // collision control
    .stall_F(stall_F),
    // control signal input
    .ctrl_pc_src_D(ctrl_pc_src_D),
    // from other stages
    .NPC_D(NPC_D),
    // to next stage
    .IR_F(IR_F),
    .PCInc4_F(PCInc4_F),
    // debug
    .PC(PC)
);


stage_id STAGE_ID (
    .clk(clk),
    .rst_n(rst_n),
    // Foward Control
    .stall_D(stall_D),
    .forwardCmpA_D(forwardCmpA_D),
    .forwardCmpB_D(forwardCmpB_D),
    .ctrl_branch_D(ctrl_branch_D),
    .ctrl_jump_reg_D(ctrl_jump_reg_D),
    .mulEnable_D(mulEnable_D),
    // control signal input
    .ctrl_grf_we_W(ctrl_grf_we_W),
    // control signal output
    .ctrl_pc_src_D(ctrl_pc_src_D),// to if
    // *Datapath*
    // from Stage MM
    .AO_M(AO_M),
    // from Stage WB
    .A3_W(A3_W),
    .WD3_W(WD3_W),
    // to Stage IF
    .NPC_D(NPC_D),
    // *Pipeline*
    // from Stage IF
    .PCInc4_F(PCInc4_F),
    .IR_F(IR_F),
    // to Stage EX
    .PCInc4_D(PCInc4_D),
    .IR_D(IR_D),
    .IMM_D(IMM_D),
    .RS_D(RS_D),
    .RT_D(RT_D)
);


stage_ex STAGE_EX (
    .clk(clk),
    .rst_n(rst_n),
    // Forward Contrl
    .forwardAluA_E(forwardAluA_E),
    .forwardAluB_E(forwardAluB_E),
    .flush_E(flush_E),
    .mulBusy_E(mulBusy_E),
    .mulEnable_E(mulEnable_E),
    // from Stage ID
    .PCInc4_D(PCInc4_D),
    .IR_D(IR_D),
    .IMM_D(IMM_D),
    .RS_D(RS_D),
    .RT_D(RT_D),
    // from Stage MM
    .AO_M(AO_M),
    // from Stage WB
    .WD3_W(WD3_W),
    // to Stage MM
    .PCInc4_E(PCInc4_E),
    .IR_E(IR_E),
    .AO_E(AO_E),
    .RT_E(RT_E),
    // collision
    .A3_E(A3_E),
    .ctrl_grf_we_E(ctrl_grf_we_E),
    .mem_to_reg_E(mem_to_reg_E)
);


stage_mm STAGE_MM (
    .clk(clk),
    .rst_n(rst_n),
    // from Stage EX
    .PCInc4_E(PCInc4_E),
    .IR_E(IR_E),
    .AO_E(AO_E),
    .RT_E(RT_E),
    // to Stage WB
    .PCInc4_M(PCInc4_M),
    .IR_M(IR_M),
    .DM_M(DM_M),
    .WD3_M(WD3_M),
    .A3_M(A3_M),
    // to other stages
    .AO_M(AO_M),
    // forward control
    .ctrl_grf_we_M(ctrl_grf_we_M),
    .mem_to_reg_M(mem_to_reg_M)
);


stage_wb STAGE_WB (
    .clk(clk),
    .rst_n(rst_n),
    // from Stage MM
    .PCInc4_M(PCInc4_M),
    .IR_M(IR_M),
    .DM_M(DM_M),
    .AO_M(AO_M),
    .WD3_M(WD3_M),
    // to other stages
    .A3_W(A3_W),
    .WD3_W(WD3_W),
    // control signal output
    .ctrl_grf_we_W(ctrl_grf_we_W)
);


collision COLLISION (
    // Input
    .IR_D(IR_D),
    .IR_E(IR_E),
    .A3_E(A3_E),
    .A3_M(A3_M),
    .A3_W(A3_W),
    .ctrl_grf_we_E(ctrl_grf_we_E),
    .ctrl_grf_we_M(ctrl_grf_we_M),
    .ctrl_grf_we_W(ctrl_grf_we_W),
    .mem_to_reg_E(mem_to_reg_E),
    .mem_to_reg_M(mem_to_reg_M),
    .mulBusy_E(mulBusy_E),
    .mulEnable_E(mulEnable_E),
    .mulEnable_D(mulEnable_D),
    .ctrl_branch_D(ctrl_branch_D),
    .ctrl_jump_reg_D(ctrl_jump_reg_D),
    // debug
    .clk(clk),
    .PCInc4_D(PCInc4_D),
    .PCInc4_E(PCInc4_E),
    // Output
    .stall_F(stall_F),
    .stall_D(stall_D),
    .flush_E(flush_E),
    .forwardCmpA_D(forwardCmpA_D),
    .forwardCmpB_D(forwardCmpB_D),
    .forwardAluA_E(forwardAluA_E),
    .forwardAluB_E(forwardAluB_E)
);



endmodule 

